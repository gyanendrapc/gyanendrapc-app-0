{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","components/Footer.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","request","axios","get","nonExisting","id","date","then","response","data","concat","newObject","post","res","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","console","log","length","notesToShow","filter","type","map","find","n","changedNote","catch","err","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","Date","toISOString","Math","random","value","onChange","target","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.434123ac.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note,toggleImportance }) => {\n  const label= note.important?'make not important':'make important'\n  return (\n    <li className=\"note\">{note.content}<button onClick={toggleImportance}>{label}</button></li>\n  )\n}\n\nexport default Note","import axios from \"axios\";\r\nconst baseUrl = \"/api/notes\";\r\n\r\n// get all data\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl);\r\n  const nonExisting = {\r\n    id: 10000,\r\n    content: \"This note is not saved to server\",\r\n    date: \"2019-05-30T17:30:31.098Z\",\r\n    important: true,\r\n  };\r\n  return request.then((response) => response.data.concat(nonExisting));\r\n};\r\n\r\n// create new data\r\nconst create = (newObject) => {\r\n  const request = axios.post(baseUrl, newObject);\r\n  return request.then((res) => res.data);\r\n};\r\n\r\n// update existing data\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject);\r\n  return request.then((res) => res.data);\r\n};\r\n\r\n// delete single data\r\n// get single data\r\nexport default {\r\n  getAll: getAll,\r\n  create: create,\r\n  update: update,\r\n};\r\n","import React from 'react'\r\n\r\nfunction Notification({message}) {\r\n    if(message===null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className=\"error\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification\r\n","import React from \"react\";\r\nconst Footer = () => {\r\n    const footerStyle = {\r\n      color: 'green',\r\n      fontStyle: 'italic',\r\n      fontSize: 16\r\n    }\r\n    return (\r\n      <div style={footerStyle}>\r\n        <br />\r\n        <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\r\n      </div>\r\n    )\r\n  }\r\n  export default Footer","import React, { useState, useEffect } from \"react\";\nimport Note from \"./components/Note\";\nimport axios from \"axios\";\n\nimport noteService from './services/notes'\nimport Notification from \"./components/Notification\";\nimport Footer from \"./components/Footer\";\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState(\"\");\n  const [showAll, setShowAll] = useState(false);\n  const [errorMessage, setErrorMessage]=useState(null)\n\n  useEffect(() => {\n    noteService\n    .getAll()\n    .then(res=>{\n      setNotes(res);\n\n    })\n    \n  }, []);\n  console.log(\"render\", notes.length, \"notes\");\n\n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    };\n\n    noteService\n    .create(noteObject)\n    .then(res=>{\n      setNotes(notes.concat(res))\n      setNewNote('')\n    })\n\n\n  };\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  };\n\n  const notesToShow = showAll ? notes : notes.filter((note) => note.important);\n\n  const toggleImportanceOf = (id) => {\n    console.log(`importance of ${id} needs to be toggled.`);\n    const url = `http://localhost:3001/api/notes/${id}`;\n    const note = notes.find((n) => n.id === id);\n    // console.log(\"value found\",note)\n    const changedNote = { ...note, important: !note.important };\n\n    noteService\n    .update(id, changedNote)\n    .then(res=>{\n      setNotes(notes.map((note) => (note.id !== id ? note : res)));\n\n    })\n    .catch(err=>{\n     setErrorMessage(`Note '${note.content}' was already removed from server`)\n     setTimeout(() => {\n       setErrorMessage(null)\n     }, 5000);\n      setNotes(notes.filter(n=>n.id!==id))\n    })\n  };\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? \"important\" : \"all\"}\n        </button>\n      </div>\n      <ol type=\"1\">\n        {notesToShow.map((note) => (\n          <Note\n            key={note.id}\n            note={note}\n            toggleImportance={() => toggleImportanceOf(note.id)}\n          />\n        ))}\n      </ol>\n      <form onSubmit={addNote}>\n        <input value={newNote} onChange={handleNoteChange} />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer/>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}